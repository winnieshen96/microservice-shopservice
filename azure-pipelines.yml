# Docker
# Build a Docker image 
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  tag: $(Build.BuildId)
  containerRegistry: 'dba3f8f5d0df4cb492652988af71367c.azurecr.io'
  imageRepository: 'demo/shop-service'
  imagePullSecret: 'regcred-shop'

stages:
- stage: Build
  displayName: Build image
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Build an image
      inputs:
        containerRegistry: 'ACRConnection'
        repository: 'demo/shop-service'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: $(tag)
    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'dev.dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: 'createSecret'
              kubernetesServiceConnection: 'dev-myAKSCluster-dev-1573614110824'
              secretType: 'dockerRegistry'
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: 'ACRConnection'
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'dev-myAKSCluster-dev-1573614110824'
              manifests: |
                $(Pipeline.Workspace)/manifests/serviceAccount.yml
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
                $(Pipeline.Workspace)/manifests/role.yml
                $(Pipeline.Workspace)/manifests/roleBinding.yml
              containers: $(containerRegistry)/$(imageRepository):$(tag)
              imagePullSecrets: $(imagePullSecret)

          - task: Kubernetes@1
            name: get
            displayName: 'Get services in the new namespace'
            continueOnError: true
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'dev-myAKSCluster-dev-1573614110824'
              namespace: 'dev'
              command: 'get'
              arguments: 'svc --selector=name=shop-service'
              outputFormat: 'jsonpath=''http://{.items[*].status.loadBalancer.ingress[0].ip}:{.items[*].spec.ports[0].port}'''

  - job:
    dependsOn: Deploy
    displayName: Integration Test
    variables:
      externalIPraw: $[dependencies.Deploy.outputs['Deploy.get.KubectlOutput']]
      externalIP: $(externalIPraw)
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: CmdLine@2
      inputs:
        script: 'echo $(externalIP)'
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        targetPath: '$(Pipeline.Workspace)'
    - task: CmdLine@2
      displayName: Install newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: replacetokens@3
      inputs:
        rootDirectory: '$(Pipeline.Workspace)/manifests/'
        targetFiles: '**/devEnv.postman_environment.json'
        encoding: 'utf-8'
        writeBOM: true
        escapeType: 'json'
        verbosity: 'detailed'
        actionOnMissing: 'warn'
        keepToken: false
        tokenPrefix: '#{'
        tokenSuffix: '}#'

    - task: CmdLine@2
      displayName: Run API Tests
      inputs:
        script: 'newman run shop-service-test.postman_collection.json -e devEnv.postman_environment.json --reporters cli,junit --reporter-junit-export Results\junitReport.xml'
        workingDirectory: '$(Pipeline.Workspace)/manifests/'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(Pipeline.Workspace)/manifests/Results/junitReport.xml'
        searchFolder: '$(Pipeline.Workspace)/manifests/'
        testRunTitle: 'Integration Test'
    
